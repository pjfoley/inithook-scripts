#!/bin/bash
###############################################################
#  This bootstraps Puppet on Debian based systems             #
###############################################################
set -e

# Load defaults for script if file exists
[ -e /etc/default/inithook-scripts/puppet-repo ] && . /etc/default/inithook-scripts/puppet-repo

# Do an initial apt-get update
echo "Initial apt-get update..."
apt-get update >/dev/null

# Check for key software and install if necessary
which lsb_release || apt-get install -y lsb-release
which wget || apt-get install -y wget

CODENAME="${CODENAME:=$(lsb_release -cs | tr '[A-Z]' '[a-z]')}"
DISTRO="${DISTRO:=$(lsb_release -is | tr '[A-Z]' '[a-z]')}"

REPO_PROTO="${REPO_PROTO:=https}"
REPO_URL="${PUPPET_REPO:=apt.puppetlabs.com}"
DEB_NAME="${DEB_NAME:=puppetlabs-release-${CODENAME}.deb}"

PROTO_URL_DEB="${PROTO_URL_DEB:=${REPO_PROTO}://${REPO_URL}/${DEB_NAME}}"
PACKAGES="${PACKAGES:=puppet rdoc}"

###############################################################
#  No tunables below this point                               #
###############################################################

# Create TMP directory and file
tmpDIR=$(mktemp -d -t "$(basename $0).XXXXX")
deb_path=$(mktemp --tmpdir="${tmpDIR}" "${DEB_NAME}.XXXXXXX")

# Clean up temporary directory and files on exit
function cleanUP
{
  rm -Rf "$tmpDIR"
}
trap cleanUP EXIT

echo "SETUP - Bootstrapping Puppet Client instal"

if [[ "$EUID" -ne "0" ]]; then
  echo $'\t'"* This script must be run as root..."
  echo "Exiting..."
  exit 1
fi

if [ "${DISTRO}" != "debian" ]; then
  echo $'\t'"* Operating System not supported..."
  echo "Exiting..."
  exit 1
fi

echo $'\t'"* Downloading - ${DEB_NAME}"
wget -qO ${deb_path} ${PROTO_URL_DEB}

echo $'\t'"* Installing - ${DEB_NAME}"
dpkg -i "${deb_path}" >/dev/null
apt-get update >/dev/null

echo $'\t'"* Installing Puppet Client packages - ${PACKAGES}"
apt-get install -y ${PACKAGES} >/dev/null

echo "Finished - Setting up Puppet Client"
